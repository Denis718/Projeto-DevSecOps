pipeline {
    agent any
    stages {
        stage("Verify tooling") {
            steps{
                sh '''
                    docker compose version
                    curl --version 
                    docker info
                    docker version
                '''
            }
        }
      
        stage('Github'){
            steps{
                git branch: 'main', url: 'https://github.com/EnricoEng/Projeto-Integrado-DSO.git'
            }
        }
        
        stage("Starting Container") {
            steps{
                sh 'docker compose -f todo_list/docker-compose.yml up -d --no-color --wait'
            }
        }

        stage('Scan with Trivy') {
            steps {
                script {
                    // Pull the Trivy Docker image
                    sh '''
                        docker pull aquasec/trivy:0.18.3
                    '''
                    // Get the list of running Docker containers
                    def containers = sh(script: 'docker ps --format "{{.Image}}"', returnStdout: true).trim().split('\n')
                    // Iterate over the list of containers and scan each one with Trivy
                    for (String container : containers) {
                        def trivyOutput = sh(script: """
                            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:0.18.3 image --exit-code 1 --severity LOW,MEDIUM,HIGH,CRITICAL ${container}
                        """, returnStdout: true).trim()
                        // Fail the build if Trivy finds any vulnerabilities
                        if (trivyOutput != "") {
                            error("Trivy found vulnerabilities in ${container}:\n${trivyOutput}")
                        }
                    }
                }
            }
        }
    }
}
